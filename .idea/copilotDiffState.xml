<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="version: '3.8'&#10;&#10;services:&#10;  postgres-user:&#10;    image: postgres:15&#10;    container_name: postgres-user&#10;    environment:&#10;      POSTGRES_DB: userdb&#10;      POSTGRES_USER: postgres&#10;      POSTGRES_PASSWORD: 12345678&#10;    volumes:&#10;      - postgres_user_data:/var/lib/postgresql/data  # Persist data&#10;    ports:&#10;      - &quot;5433:5432&quot;&#10;    networks:&#10;      - spring-net&#10;&#10;  postgres-cart:&#10;    image: postgres:15&#10;    container_name: postgres-cart&#10;    environment:&#10;      POSTGRES_DB: cartdb&#10;      POSTGRES_USER: postgres&#10;      POSTGRES_PASSWORD: 12345678&#10;    volumes:&#10;      - postgres_cart_data:/var/lib/postgresql/data  # Persist data&#10;    ports:&#10;      - &quot;5434:5432&quot;&#10;    networks:&#10;      - spring-net&#10;&#10;  postgres-order:&#10;    image: postgres:15&#10;    container_name: postgres-order&#10;    environment:&#10;      POSTGRES_DB: orderdb&#10;      POSTGRES_USER: postgres&#10;      POSTGRES_PASSWORD: 12345678&#10;    volumes:&#10;      - postgres_order_data:/var/lib/postgresql/data  # Persist data&#10;    ports:&#10;      - &quot;5435:5432&quot;&#10;    networks:&#10;      - spring-net&#10;&#10;  postgres-payment:&#10;    image: postgres:15&#10;    container_name: postgres-payment&#10;    environment:&#10;      POSTGRES_DB: paymentdb&#10;      POSTGRES_USER: postgres&#10;      POSTGRES_PASSWORD: 12345678&#10;    volumes:&#10;      - postgres_payment_data:/var/lib/postgresql/data  # Persist data&#10;    ports:&#10;      - &quot;5436:5432&quot;&#10;    networks:&#10;      - spring-net&#10;&#10;  redis:&#10;    image: redis:7-alpine&#10;    container_name: redis-server&#10;    ports:&#10;      - &quot;6379:6379&quot;&#10;    volumes:&#10;      - redis_data:/data  # Persist Redis data&#10;    networks:&#10;      - spring-net&#10;&#10;  eureka-server:&#10;    build:&#10;      context: ./EurekaServer&#10;    image: eureka-server-1&#10;    container_name: eureka-server-1&#10;    ports:&#10;      - &quot;8761:8761&quot;&#10;    networks:&#10;      - spring-net&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8761/actuator/health&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;&#10;  gateway-service:&#10;    build:&#10;      context: ./GatewayService&#10;    image: gateway-service&#10;    container_name: gateway-service&#10;    depends_on:&#10;      eureka-server:&#10;        condition: service_healthy&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka&#10;      - API_KEY=685489151257751&#10;      - API_SECRET=_pNWRfMbtjT08kgGp8z6c6Rotxs&#10;      - CLOUD_NAME=dxssmpeii&#10;      - SECRET_KEY=92312d77cd9437b5c2ddf01aef8bb8a1e5f20b5c8ee53a295fa488989652070d9aadf064d8e521219309f198de5873b59755bdc04c0fa4a2fd5c192364e60a8c492f81cfe8e6741bf1cc3064f8194a4235a5f3982cb0517c4d01741c97b76a2b339f05e57b3d4160ba092b37d35d48af2cf06ff6ae1dfd76b5ec033e8114fa01ef022fb307023ff9d3627940913d663c736747ca86468bd1735d96cb191227f6dded90a7f7ef71d7208123e4933877bd8b5b3dee1287ac111bc7fb84fee272497bdfae0f4d36743d7e761f0ac7ddb598277ce15d5ca1a3459f9072de6ce34153a29788146217a6a84aab6b1e279f603fadfd228e5cd706279894821aebac75d5171633a04f9a3738ad840cd85acf0583442019f8f5276cfd37ef976e0ba19f49&#10;    networks:&#10;      - spring-net&#10;&#10;  user-service:&#10;    build:&#10;      context: ./UserService&#10;    image: user-service&#10;    container_name: user-service&#10;    depends_on:&#10;      eureka-server:&#10;        condition: service_healthy&#10;      postgres-user:&#10;        condition: service_started&#10;      redis:&#10;        condition: service_started&#10;    environment:&#10;      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka&#10;      - CLIENT_ID=1025886906029-1go0pfc4j5pjpatg7hjguuv5km5lopl2.apps.googleusercontent.com&#10;      - CLIENT_SECRET=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&#10;      - JWT_SECRET_KEY=92312d77cd9437b5c2ddf01aef8bb8a1e5f20b5c8ee53a295fa488989652070d9aadf064d8e521219309f198de5873b59755bdc04c0fa4a2fd5c192364e60a8c492f81cfe8e6741bf1cc3064f8194a4235a5f3982cb0517c4d01741c97b76a2b339f05e57b3d4160ba092b37d35d48af2cf06ff6ae1dfd76b5ec033e8114fa01ef022fb307023ff9d3627940913d663c736747ca86468bd1735d96cb191227f6dded90a7f7ef71d7208123e4933877bd8b5b3dee1287ac111bc7fb84fee272497bdfae0f4d36743d7e761f0ac7ddb598277ce15d5ca1a3459f9072de6ce34153a29788146217a6a84aab6b1e279f603fadfd228e5cd706279894821aebac75d5171633a04f9a3738ad840cd85acf0583442019f8f5276cfd37ef976e0ba19f49&#10;      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5433/userdb&#10;      - SPRING_DATASOURCE_USERNAME=postgres&#10;      - SPRING_DATASOURCE_PASSWORD=12345678&#10;      - SPRING_DATA_REDIS_HOST=redis-server&#10;      - SPRING_DATA_REDIS_PORT=6379&#10;    ports:&#10;      - &quot;8085:8085&quot;&#10;    networks:&#10;      - spring-net&#10;&#10;  product-service:&#10;    build:&#10;      context: ./ProductService&#10;    image: product-service&#10;    container_name: product-service&#10;    depends_on:&#10;      eureka-server:&#10;        condition: service_healthy&#10;    environment:&#10;      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka&#10;    networks:&#10;      - spring-net&#10;&#10;  cart-service:&#10;    build:&#10;      context: ./CartService&#10;    image: cart-service&#10;    container_name: cart-service&#10;    depends_on:&#10;      eureka-server:&#10;        condition: service_healthy&#10;      postgres-cart:&#10;        condition: service_started&#10;      redis:&#10;        condition: service_started&#10;    environment:&#10;      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka&#10;      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-cart:5434/cartdb&#10;      - SPRING_DATASOURCE_USERNAME=postgres&#10;      - SPRING_DATASOURCE_PASSWORD=12345678&#10;      - SPRING_DATA_REDIS_HOST=redis-server&#10;      - SPRING_DATA_REDIS_PORT=6379&#10;    networks:&#10;      - spring-net&#10;&#10;  order-service:&#10;    build:&#10;      context: ./OrderService&#10;    image: order-service&#10;    container_name: order-service&#10;    depends_on:&#10;      eureka-server:&#10;        condition: service_healthy&#10;      postgres-order:&#10;        condition: service_started&#10;      redis:&#10;        condition: service_started&#10;    environment:&#10;      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka&#10;      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5435/orderdb&#10;      - SPRING_DATASOURCE_USERNAME=postgres&#10;      - SPRING_DATASOURCE_PASSWORD=12345678&#10;      - SPRING_DATA_REDIS_HOST=redis-server&#10;      - SPRING_DATA_REDIS_PORT=6379&#10;    networks:&#10;      - spring-net&#10;&#10;  payment-service:&#10;    build:&#10;      context: ./PaymentService&#10;    image: payment-service&#10;    container_name: payment-service&#10;    depends_on:&#10;      eureka-server:&#10;        condition: service_healthy&#10;      postgres-payment:&#10;        condition: service_started&#10;      redis:&#10;        condition: service_started&#10;    environment:&#10;      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka&#10;      - PASSWORD_EMAIL=hmfb jzuh zfil dhsa&#10;      - SECRET_KEY=FSK6DMH5TQ03QHP03H2YUHBHCA1HHIH5&#10;      - TMA_CODE=DQ2QRKII&#10;      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-payment:5436/paymentdb&#10;      - SPRING_DATASOURCE_USERNAME=postgres&#10;      - SPRING_DATASOURCE_PASSWORD=12345678&#10;      - SPRING_DATA_REDIS_HOST=redis-server&#10;      - SPRING_DATA_REDIS_PORT=6379&#10;    networks:&#10;      - spring-net&#10;&#10;volumes:&#10;  postgres_user_data:&#10;  postgres_cart_data:&#10;  postgres_order_data:&#10;  postgres_payment_data:&#10;  redis_data:&#10;&#10;networks:&#10;  spring-net:&#10;    driver: bridge" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  postgres:&#10;    image: postgres:15&#10;    container_name: postgres-main&#10;    environment:&#10;      POSTGRES_USER: postgres&#10;      POSTGRES_PASSWORD: 12345678&#10;      POSTGRES_MULTIPLE_DATABASES: userdb,cartdb,orderdb,paymentdb&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;      - ./postgres-init:/docker-entrypoint-initdb.d&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    networks:&#10;      - spring-net&#10;&#10;  redis:&#10;    image: redis:7-alpine&#10;    container_name: redis-server&#10;    ports:&#10;      - &quot;6379:6379&quot;&#10;    volumes:&#10;      - redis_data:/data&#10;    networks:&#10;      - spring-net&#10;&#10;  eureka-server:&#10;    build:&#10;      context: ./EurekaServer&#10;    image: eureka-server-1&#10;    container_name: eureka-server-1&#10;    ports:&#10;      - &quot;8761:8761&quot;&#10;    networks:&#10;      - spring-net&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8761/actuator/health&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;&#10;  gateway-service:&#10;    build:&#10;      context: ./GatewayService&#10;    image: gateway-service&#10;    container_name: gateway-service&#10;    depends_on:&#10;      eureka-server:&#10;        condition: service_healthy&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka&#10;      - API_KEY=685489151257751&#10;      - API_SECRET=_pNWRfMbtjT08kgGp8z6c6Rotxs&#10;      - CLOUD_NAME=dxssmpeii&#10;      - SECRET_KEY=92312d77cd9437b5c2ddf01aef8bb8a1e5f20b5c8ee53a295fa488989652070d9aadf064d8e521219309f198de5873b59755bdc04c0fa4a2fd5c192364e60a8c492f81cfe8e6741bf1cc3064f8194a4235a5f3982cb0517c4d01741c97b76a2b339f05e57b3d4160ba092b37d35d48af2cf06ff6ae1dfd76b5ec033e8114fa01ef022fb307023ff9d3627940913d663c736747ca86468bd1735d96cb191227f6dded90a7f7ef71d7208123e4933877bd8b5b3dee1287ac111bc7fb84fee272497bdfae0f4d36743d7e761f0ac7ddb598277ce15d5ca1a3459f9072de6ce34153a29788146217a6a84aab6b1e279f603fadfd228e5cd706279894821aebac75d5171633a04f9a3738ad840cd85acf0583442019f8f5276cfd37ef976e0ba19f49&#10;    networks:&#10;      - spring-net&#10;&#10;  user-service:&#10;    build:&#10;      context: ./UserService&#10;    image: user-service&#10;    container_name: user-service&#10;    depends_on:&#10;      eureka-server:&#10;        condition: service_healthy&#10;      postgres:&#10;        condition: service_started&#10;      redis:&#10;        condition: service_started&#10;    environment:&#10;      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka&#10;      - CLIENT_ID=1025886906029-1go0pfc4j5pjpatg7hjguuv5km5lopl2.apps.googleusercontent.com&#10;      - CLIENT_SECRET=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&#10;      - JWT_SECRET_KEY=92312d77cd9437b5c2ddf01aef8bb8a1e5f20b5c8ee53a295fa488989652070d9aadf064d8e521219309f198de5873b59755bdc04c0fa4a2fd5c192364e60a8c492f81cfe8e6741bf1cc3064f8194a4235a5f3982cb0517c4d01741c97b76a2b339f05e57b3d4160ba092b37d35d48af2cf06ff6ae1dfd76b5ec033e8114fa01ef022fb307023ff9d3627940913d663c736747ca86468bd1735d96cb191227f6dded90a7f7ef71d7208123e4933877bd8b5b3dee1287ac111bc7fb84fee272497bdfae0f4d36743d7e761f0ac7ddb598277ce15d5ca1a3459f9072de6ce34153a29788146217a6a84aab6b1e279f603fadfd228e5cd706279894821aebac75d5171633a04f9a3738ad840cd85acf0583442019f8f5276cfd37ef976e0ba19f49&#10;      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/userdb&#10;      - SPRING_DATASOURCE_USERNAME=postgres&#10;      - SPRING_DATASOURCE_PASSWORD=12345678&#10;      - SPRING_DATA_REDIS_HOST=redis-server&#10;      - SPRING_DATA_REDIS_PORT=6379&#10;    ports:&#10;      - &quot;8085:8085&quot;&#10;    networks:&#10;      - spring-net&#10;&#10;  product-service:&#10;    build:&#10;      context: ./ProductService&#10;    image: product-service&#10;    container_name: product-service&#10;    depends_on:&#10;      eureka-server:&#10;        condition: service_healthy&#10;    environment:&#10;      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka&#10;    networks:&#10;      - spring-net&#10;&#10;  cart-service:&#10;    build:&#10;      context: ./CartService&#10;    image: cart-service&#10;    container_name: cart-service&#10;    depends_on:&#10;      eureka-server:&#10;        condition: service_healthy&#10;      postgres:&#10;        condition: service_started&#10;      redis:&#10;        condition: service_started&#10;    environment:&#10;      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka&#10;      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/cartdb&#10;      - SPRING_DATASOURCE_USERNAME=postgres&#10;      - SPRING_DATASOURCE_PASSWORD=12345678&#10;      - SPRING_DATA_REDIS_HOST=redis-server&#10;      - SPRING_DATA_REDIS_PORT=6379&#10;    networks:&#10;      - spring-net&#10;&#10;  order-service:&#10;    build:&#10;      context: ./OrderService&#10;    image: order-service&#10;    container_name: order-service&#10;    depends_on:&#10;      eureka-server:&#10;        condition: service_healthy&#10;      postgres:&#10;        condition: service_started&#10;      redis:&#10;        condition: service_started&#10;    environment:&#10;      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka&#10;      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/orderdb&#10;      - SPRING_DATASOURCE_USERNAME=postgres&#10;      - SPRING_DATASOURCE_PASSWORD=12345678&#10;      - SPRING_DATA_REDIS_HOST=redis-server&#10;      - SPRING_DATA_REDIS_PORT=6379&#10;    networks:&#10;      - spring-net&#10;&#10;  payment-service:&#10;    build:&#10;      context: ./PaymentService&#10;    image: payment-service&#10;    container_name: payment-service&#10;    depends_on:&#10;      eureka-server:&#10;        condition: service_healthy&#10;      postgres:&#10;        condition: service_started&#10;      redis:&#10;        condition: service_started&#10;    environment:&#10;      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka&#10;      - PASSWORD_EMAIL=hmfb jzuh zfil dhsa&#10;      - SECRET_KEY=FSK6DMH5TQ03QHP03H2YUHBHCA1HHIH5&#10;      - TMA_CODE=DQ2QRKII&#10;      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/paymentdb&#10;      - SPRING_DATASOURCE_USERNAME=postgres&#10;      - SPRING_DATASOURCE_PASSWORD=12345678&#10;      - SPRING_DATA_REDIS_HOST=redis-server&#10;      - SPRING_DATA_REDIS_PORT=6379&#10;    networks:&#10;      - spring-net&#10;&#10;volumes:&#10;  postgres_data:&#10;  redis_data:&#10;&#10;networks:&#10;  spring-net:&#10;    driver: bridge" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/postgres-init/init-databases.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/postgres-init/init-databases.sql" />
              <option name="updatedContent" value="-- Script to initialize multiple databases for microservices&#10;-- This script creates separate databases for each service within a single PostgreSQL instance&#10;&#10;CREATE DATABASE userdb;&#10;CREATE DATABASE cartdb;&#10;CREATE DATABASE orderdb;&#10;CREATE DATABASE paymentdb;&#10;&#10;-- Grant privileges to postgres user for all databases&#10;GRANT ALL PRIVILEGES ON DATABASE userdb TO postgres;&#10;GRANT ALL PRIVILEGES ON DATABASE cartdb TO postgres;&#10;GRANT ALL PRIVILEGES ON DATABASE orderdb TO postgres;&#10;GRANT ALL PRIVILEGES ON DATABASE paymentdb TO postgres;&#10;&#10;-- Optional: Create schemas for better organization&#10;\c userdb;&#10;CREATE SCHEMA IF NOT EXISTS user_schema;&#10;GRANT ALL ON SCHEMA user_schema TO postgres;&#10;&#10;\c cartdb;&#10;CREATE SCHEMA IF NOT EXISTS cart_schema;&#10;GRANT ALL ON SCHEMA cart_schema TO postgres;&#10;&#10;\c orderdb;&#10;CREATE SCHEMA IF NOT EXISTS order_schema;&#10;GRANT ALL ON SCHEMA order_schema TO postgres;&#10;&#10;\c paymentdb;&#10;CREATE SCHEMA IF NOT EXISTS payment_schema;&#10;GRANT ALL ON SCHEMA payment_schema TO postgres;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>